(require 'asdf)
(defpackage #:brainfuck
    (:use #:cl #:uiop))
(in-package #:brainfuck)

(declaim (optimize (speed 3) (debug 0)))

(defun file-string (path)
    (with-open-file (stream path)
        (let ((data (make-string (file-length stream))))
            (read-sequence data stream)
            data)))

(labels
    ((retrieve-left (code index amount)
        (if (= amount 0)
            (+ index 1)
            (let ((c (char code (- index 1))))
                (if (string= c "[")
                    (retrieve-left code (- index 1)(- amount 1))
                    (if (string= c "]")
                        (retrieve-left code (- index 1)(+ amount 1))
                        (retrieve-left code (- index 1) amount))))))
    (retrieve-right (code index amount)
        (if (= amount 0)
            index
            (let ((c (char code (+ index 1))))
                (if (string= c "]")
                    (retrieve-right code (+ index 1)(- amount 1))
                    (if (string= c "[")
                        (retrieve-right code (+ index 1)(+ amount 1))
                        (retrieve-right code (+ index 1) amount))))))
    (run-bf (code iptr data dptr len)
        (when (not (= iptr len))
            (let ((c (char code iptr)))
                (cond
                    ((char= c #\>)
                        (run-bf code (+ iptr 1) data (+ dptr 1) len))
                    ((char= c #\<)
                        (run-bf code (+ iptr 1) data (- dptr 1) len))
                    ((char= c #\+)
                        (incf (nth dptr data))
                        (run-bf code (+ iptr 1) data dptr len))
                    ((char= c #\-)
                        (decf (nth dptr data))
                        (run-bf code (+ iptr 1) data dptr len))
                    ((char= c #\.)
                        (format *STANDARD-OUTPUT* "~A" (code-char (nth dptr data)))
                        (run-bf code (+ iptr 1) data dptr len))
                    ((char= c #\,)
                        (setf (nth dptr data) (char-code (read-char)))
                        (run-bf code (+ iptr 1) data dptr len))
                    ((string= c "[")
                        (if (= (nth dptr data) 0)
                            (run-bf code (retrieve-right code iptr 1) data dptr len)
                            (run-bf code (+ iptr 1) data dptr len)))
                    ((string= c "]")
                        (if (not (= (nth dptr data) 0))
                            (run-bf code (retrieve-left code (- iptr 1) 1) data dptr len)
                            (run-bf code (+ iptr 1) data dptr len))))))))
    (let ((code (file-string (nth 0 uiop:*command-line-arguments*))))
        (run-bf code 0 (make-list 30000 :initial-element 0) 0 (length code))
        (uiop:quit)))